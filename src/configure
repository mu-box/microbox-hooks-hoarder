#!/usr/bin/env ruby

# hookit is installed as a bundled app, so we need bundler to load it for us
$:.unshift  '/opt/gomicro/hookit/vendor/bundle'
require 'bundler/setup'

# load hookit/setup to bootstrap hookit and import the dsl
require 'hookit/setup'

# ensure data directory exists
directory '/var/db/hoarder' do
  recursive true
end

# ensure the etc config directory exists
directory '/etc/hoarder' do
  recursive true
end

# generate the config file
template '/etc/hoarder/config.yml' do
  source 'hoarder/config.yml.erb'
  mode 0644
  variables ({ config: (payload[:config] || {}) })
  owner 'gomicro'
  group 'gomicro'
end

# ensure slurp data directory exists
directory '/var/db/slurp' do
  recursive true
end

# ensure the etc config directory exists
directory '/etc/slurp' do
  recursive true
end

# generate the config file
template '/etc/slurp/config.json' do
  source 'slurp/config.json.erb'
  mode 0644
  variables ({ config: (payload[:config] || {}) })
  owner 'gomicro'
  group 'gomicro'
end

# configure narc
if payload[:logvac_host]
  template '/opt/gomicro/etc/narc.conf' do
    variables ({
      uid: payload[:component][:uid], logvac: payload[:logvac_host]
    })
  end
end

if payload[:platform] != 'local'

  # Setup root keys for data migrations
  directory '/root/.ssh' do
    recursive true
  end

  file '/root/.ssh/id_rsa' do
    content payload[:ssh][:admin_key][:private_key]
    mode 0600
  end

  file '/root/.ssh/id_rsa.pub' do
    content payload[:ssh][:admin_key][:public_key]
  end

  file '/root/.ssh/authorized_keys' do
    content payload[:ssh][:admin_key][:public_key]
  end

  # Create some ssh host keys
  execute "ssh-keygen -f /opt/gomicro/etc/ssh/ssh_host_rsa_key -N '' -t rsa" do
    not_if { ::File.exists? '/opt/gomicro/etc/ssh/ssh_host_rsa_key' }
  end

  execute "ssh-keygen -f /opt/gomicro/etc/ssh/ssh_host_dsa_key -N '' -t dsa" do
    not_if { ::File.exists? '/opt/gomicro/etc/ssh/ssh_host_dsa_key' }
  end

  execute "ssh-keygen -f /opt/gomicro/etc/ssh/ssh_host_ecdsa_key -N '' -t ecdsa" do
    not_if { ::File.exists? '/opt/gomicro/etc/ssh/ssh_host_ecdsa_key' }
  end

  execute "ssh-keygen -f /opt/gomicro/etc/ssh/ssh_host_ed25519_key -N '' -t ed25519" do
    not_if { ::File.exists? '/opt/gomicro/etc/ssh/ssh_host_ed25519_key' }
  end

end
